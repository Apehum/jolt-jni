/*
Copyright (c) 2025 Stephen Gold

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
package com.github.stephengold.joltjni.vhacd;

import com.github.stephengold.joltjni.Jolt;
import com.github.stephengold.joltjni.JoltPhysicsObject;
import java.nio.FloatBuffer;

/**
 * An immutable 3-D convex hull generated by the V-HACD algorithm. (native
 * class: {@code IVHACD::ConvexHull})
 */
public class ConvexHull extends JoltPhysicsObject {
    // *************************************************************************
    // constants

    /**
     * number of axes in the coordinate system
     */
    final private static int numAxes = 3;
    // *************************************************************************
    // constructors

    /**
     * Instantiate a hull with the specified native object assigned.
     *
     * @param hullVa the virtual address of the native object to assign (not
     * zero)
     * @param owner {@code true} &rarr; make the JVM object the owner,
     * {@code false} &rarr; it isn't the owner
     */
    ConvexHull(long hullVa, boolean owner) {
        Runnable freeingAction = owner ? () -> free(hullVa) : null;
        setVirtualAddress(hullVa, freeingAction);
    }
    // *************************************************************************
    // new methods exposed

    /**
     * Count the points.
     *
     * @return the count (&ge;1)
     */
    public int countPoints() {
        long hullVa = va();
        int result = countPoints(hullVa);

        return result;
    }

    /**
     * Copy the point locations to a new direct buffer.
     *
     * @return the new buffer (capacity a positive multiple of 3)
     */
    public FloatBuffer getPointsAsBuffer() {
        long hullVa = va();
        int numPoints = countPoints(hullVa);
        int numFloats = numPoints * numAxes;
        assert numFloats > 0 : numFloats;

        FloatBuffer result = Jolt.newDirectFloatBuffer(numFloats);
        copyPoints(hullVa, result);

        return result;
    }
    // *************************************************************************
    // native private methods

    native private static void copyPoints(long hullVa, FloatBuffer result);

    native private static int countPoints(long hullVa);

    native private static void free(long hullVa);
}
